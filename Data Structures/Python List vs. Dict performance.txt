Python List vs. Dict performance:

List:
eg. a = [1,2,3,4,5]

		Opration			Example			Time Complexity
(1). indexing: 				 a[i] 				O(1)
(2). index assignment: 		a[i] = 0			O(1)
(3). append				   a.append(6)			O(1)
(4). pop					a.pop()				O(1)
(5). pop(i)					a.pop(i)			O(n) (search from list end)
(6). insert				  a.insert(i, 7)		O(n) (search from list end)
(7). remove				  a.remove(5)			O(n) (search from list end)
(7). del					del a[i]			O(n)
(8). iteration 			  for each in a:		O(n)
(9). look up         	 if 2 (not) in a:		O(n)
(10).sort					a.sort()			O(nlgn)
(11).get slice				b = a[x:y]			O(n)
(12).set slice				a[x:y] = b			O(n+k)
(13).reverse				a[::-1]				O(n)
(14).concatenate			a + [8,9]			O(k)
(15).multiply				a * 5				O(nk)

Dict:
eg. dict1 = {1:1, 2:3, 3:5}

		Opration			Example			Time Complexity
(1). copy              dict2 = dict(dict1)		O(n)
(2). get item			  c = dict1[key]		O(1)
(3). set item		      dict1[key] = 5		O(1)
(4). del				  del dict1[key]		O(1)
(5). look up(key) 		if 2 (not) in dict1:	O(1)
(6). iteration(key)		for key in dict1:		O(n)

Summary:
list基本上随着其元素的数目呈线性增长，而dictionary一直维持在很短很短的时间内.
(我的机子测试的结果都是0.001ms). Dictionary类似Java中的HashMap，内部实现使用了hash函数，所以查找和删除都是常数时间的.



Reference:

Python中各种data structure的时间复杂度分析：

1） List：

The list object stores pointers to objects, not the actual objects themselves. The size of a list in memory depends on the number of objects in the list, not the size of the objects.

The time needed to get or set an individual item is constant, no matter what the size of the list is (also known as “O(1)” behaviour).

The time needed to append an item to the list is “amortized constant”; whenever the list needs to allocate more memory, it allocates room for a few items more than it actually needs, to avoid having to reallocate on each call (this assumes that the memory allocator is fast; for huge lists, the allocation overhead may push the behaviour towards O(n*n)).

The time needed to insert an item depends on the size of the list, or more exactly, how many items that are to the right of the inserted item (O(n)). In other words, inserting items at the end is fast, but inserting items at the beginning can be relatively slow, if the list is large.

The time needed to remove an item is about the same as the time needed to insert an item at the same location; removing items at the end is fast, removing items at the beginning is slow.

The time needed to reverse a list is proportional to the list size (O(n)).
The time needed to sort a list varies; the worst case is O(n log n), but typical cases are often a lot better than that.


 